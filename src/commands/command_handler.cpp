// src/commands/command_handler.cpp - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
#include "command_handler.h"
#include "system_manager.h"

CommandHandler::CommandHandler() : systemManager(nullptr) {
}

void CommandHandler::processCommands() {
    if (!Serial.available()) return;
    
    String command = Serial.readStringUntil('\n');
    command.trim();
    command.toLowerCase();
    
    if (command.isEmpty()) return;
    
    Serial.printf("[CMD] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: '%s'\n", command.c_str());
    processCommand(command);
}

void CommandHandler::processCommand(const String& command) {
    if (!systemManager) {
        Serial.println("[ERROR] ‚ùå SystemManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return;
    }
    
    // === –°–ü–†–ê–í–û–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
    if (command == "help" || command == "?") {
        showHelp();
        return;
    }
    
    // === –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
    if (command == "status" || command == "info") {
        handleSystemCommands(command);
        return;
    }
    
    if (command == "restart" || command == "reboot") {
        Serial.println("[CMD] üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...");
        delay(3000);
        ESP.restart();
        return;
    }
    
    if (command == "memory" || command == "mem") {
        showMemoryInfo();
        return;
    }
    
    if (command == "uptime") {
        showUptimeInfo();
        return;
    }
    
    // === –ö–ê–ú–ï–†–ê –ö–û–ú–ê–ù–î–´ ===
    if (command.startsWith("cam") || command == "start" || command == "stop" || 
        command == "reset" || command == "quality" || command == "stats" || 
        command == "verbose" || command == "clear" || command == "fps") {
        handleCameraCommands(command);
        return;
    }
    
    // === WiFi –ö–û–ú–ê–ù–î–´ ===
    if (command.startsWith("wifi") || command == "clients") {
        handleWiFiCommands(command);
        return;
    }
    
    // MJPEG commands
    if (command.startsWith("mjpeg")) {
        handleMJPEGCommands(command);
        return;
    }
    
    Serial.printf("[ERROR] Unknown command: '%s'. Type 'help' for available commands.\n", 
                 command.c_str());
}

void CommandHandler::handleCameraCommands(const String& command) {
    auto& camera = systemManager->getCamera();
    auto& taskManager = systemManager->getTaskManager();
    
    if (command == "start") {
        taskManager.enableVideoStreaming();
        Serial.println("[CMD] Video streaming started");
    }
    else if (command == "stop") {
        taskManager.disableVideoStreaming();
        Serial.println("[CMD] Video streaming stopped");
    }
    else if (command == "reset") {
        Serial.println("[CMD] Resetting camera...");
        camera.deinitialize();
        delay(1000);
        if (camera.initialize()) {
            Serial.println("[SUCCESS] Camera reset successful");
        } else {
            Serial.printf("[ERROR] Camera reset failed: %s\n", 
                         camera.getLastErrorMessage().c_str());
        }
    }
    else if (command == "stats") {
        camera.logDetailedStats();
    }
    else if (command == "clear") {
        camera.resetStatistics();
        Serial.println("[CMD] Statistics cleared");
    }
    else if (command == "quality") {
        Serial.println("[CMD] Enter JPEG quality (0-63, lower=better): ");
        while (!Serial.available()) delay(10);
        int quality = Serial.parseInt();
        if (camera.setJpegQuality(quality)) {
            Serial.printf("[SUCCESS] JPEG quality set to %d\n", quality);
        } else {
            Serial.printf("[ERROR] Failed to set quality: %s\n", 
                         camera.getLastErrorMessage().c_str());
        }
    }
    else if (command == "verbose") {
        taskManager.toggleVerboseLogging();
        Serial.printf("[CMD] Verbose logging: %s\n", 
                     taskManager.isVerboseLogging() ? "ON" : "OFF");
    }
    else if (command == "grayscale" || command == "bw") {
        Serial.println("[CMD] üé¨ Switching to GRAYSCALE mode...");
        if (camera.setGrayscaleMode(true)) {
            Serial.println("[SUCCESS] ‚úÖ Grayscale mode enabled");
            Serial.println("[INFO] üìä JPEG files will be 30-50% smaller");
            Serial.println("[INFO] üöÄ Better WebSocket stability with large scenes");
        } else {
            Serial.printf("[ERROR] ‚ùå Failed to enable grayscale: %s\n", 
                         camera.getLastErrorMessage().c_str());
        }
    }
    else if (command == "color" || command == "rgb") {
        Serial.println("[CMD] üåà Switching to COLOR mode...");
        if (camera.setGrayscaleMode(false)) {
            Serial.println("[SUCCESS] ‚úÖ Color mode enabled");
            Serial.println("[INFO] üé® Full color video streaming");
            Serial.println("[WARNING] ‚ö†Ô∏è  Larger JPEG files - may cause disconnects");
        } else {
            Serial.printf("[ERROR] ‚ùå Failed to enable color: %s\n", 
                         camera.getLastErrorMessage().c_str());
        }
    }
}

void CommandHandler::handleWiFiCommands(const String& command) {
    auto& wifi = systemManager->getWiFi();
    
    if (command == "wifi") {
        Serial.printf("[WiFi] üì° SSID: ESP32-S3_Drone_30fps\n");
        Serial.printf("[WiFi] üåê IP: %s\n", WiFi.softAPIP().toString().c_str());
        Serial.printf("[WiFi] üë• Connected clients: %d\n", WiFi.softAPgetStationNum());
        Serial.printf("[WiFi] üì∂ Channel: %d\n", WiFi.channel());
        Serial.printf("[WiFi] üìä Mode: %s\n", (WiFi.getMode() & WIFI_AP) ? "AP active" : "AP inactive");
        Serial.printf("[WiFi] üîã Power: %d dBm\n", WiFi.getTxPower());
        Serial.printf("[WiFi] ‚úÖ Stability: %s\n", wifi.isConnected() ? "STABLE" : "ISSUES");
    }
    else if (command == "wifireset") {
        Serial.println("[WiFi] üîÑ Full WiFi configuration reset...");
        wifi.stop();
        delay(1000);
        wifi.init("ESP32-S3_Drone_30fps", "drone2024");
        delay(500);
        wifi.start();
        Serial.println("[WiFi] ‚úÖ WiFi restarted. Try connecting again.");
    }
    else if (command == "wificlients") {
        wifi.checkStability();
    }
}

void CommandHandler::handleMJPEGCommands(const String& command) {
    if (command == "mjpegstatus") {
        Serial.println("[MJPEG] MJPEG server is RUNNING on port 80");
        Serial.println("[MJPEG] Stream URL: http://192.168.4.1/stream");
    }
}

void CommandHandler::handleSystemCommands(const String& command) {
    if (command == "status" || command == "info") {
        systemManager->printSystemStatus();
    }
}

void CommandHandler::showHelp() {
    Serial.println("\nüöÅ ===== ESP32-S3 FPV DRONE CAMERA –ö–û–ú–ê–ù–î–´ =====");
    Serial.println();
    Serial.println("üì∑ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ï–†–û–ô:");
    Serial.println("  start         - ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥");
    Serial.println("  stop          - ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å—Ç—Ä–∏–º–∏–Ω–≥");  
    Serial.println("  reset         - üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã");
    Serial.println("  fps           - üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π FPS");
    Serial.println("  quality       - üé® –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ JPEG (0-63)");
    Serial.println("  grayscale/bw  - üé¨ –ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ä–µ–∂–∏–º (–º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)");
    Serial.println("  color/rgb     - üåà –¶–≤–µ—Ç–Ω–æ–π —Ä–µ–∂–∏–º (–±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä)");
    Serial.println("  stats         - üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–µ—Ä—ã");
    Serial.println();
    Serial.println("üåê –°–ï–¢–¨ –ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:");
    Serial.println("  wifi          - üì∂ –°—Ç–∞—Ç—É—Å WiFi —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞"); 
    Serial.println("  clients       - üë• –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤");
    Serial.println("  ws            - üîå –°—Ç–∞—Ç—É—Å WebSocket —Å–µ—Ä–≤–µ—Ä–∞");
    Serial.println();
    Serial.println("üñ•Ô∏è  –°–ò–°–¢–ï–ú–ê –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:");
    Serial.println("  status        - ‚ÑπÔ∏è  –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã");
    Serial.println("  memory        - üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏");
    Serial.println("  uptime        - ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã");
    Serial.println("  restart       - üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32-S3");
    Serial.println();
    Serial.println("üõ†Ô∏è  –û–¢–õ–ê–î–ö–ê:");
    Serial.println("  verbose       - üîç –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏");
    Serial.println("  clear         - üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω");
    Serial.println("  help          - ‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
    Serial.println();
    Serial.println("üí° –ü–†–ò–ú–ï–†–´:");
    Serial.println("  > status      # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π");  
    Serial.println("  > fps         # –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤");
    Serial.println("  > grayscale   # –í–∫–ª—é—á–∏—Ç—å —á/–± —Ä–µ–∂–∏–º (—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ)");
    Serial.println("  > color       # –í–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–Ω–æ–π —Ä–µ–∂–∏–º");
    Serial.println("  > clients     # –°–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ");
    Serial.println("  > memory      # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—É—é –ø–∞–º—è—Ç—å");
    Serial.println();
    Serial.println("üåê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –î–†–û–ù–£:");
    Serial.println("  WiFi:    ESP32-S3_Drone_30fps");
    Serial.println("  –ü–∞—Ä–æ–ª—å:  drone2024");
    Serial.println("  –ë—Ä–∞—É–∑–µ—Ä: http://192.168.4.1:8080");
    Serial.println("==================================================");
}

void CommandHandler::showMemoryInfo() {
    Serial.println("\nüíæ ===== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–ú–Ø–¢–ò =====");
    
    // Heap –ø–∞–º—è—Ç—å
    uint32_t freeHeap = ESP.getFreeHeap();
    uint32_t totalHeap = ESP.getHeapSize();
    uint32_t usedHeap = totalHeap - freeHeap;
    float heapUsage = (float)usedHeap / totalHeap * 100;
    
    Serial.printf("üìä HEAP –ø–∞–º—è—Ç—å:\n");
    Serial.printf("   –°–≤–æ–±–æ–¥–Ω–æ: %lu KB (%lu bytes)\n", freeHeap / 1024, freeHeap);
    Serial.printf("   –ó–∞–Ω—è—Ç–æ:   %lu KB (%lu bytes)\n", usedHeap / 1024, usedHeap);
    Serial.printf("   –í—Å–µ–≥–æ:    %lu KB (%lu bytes)\n", totalHeap / 1024, totalHeap);
    Serial.printf("   –ó–∞–≥—Ä—É–∑–∫–∞: %.1f%%\n", heapUsage);
    
    // PSRAM –ø–∞–º—è—Ç—å
    uint32_t freePsram = ESP.getFreePsram();
    uint32_t totalPsram = ESP.getPsramSize();
    uint32_t usedPsram = totalPsram - freePsram;
    float psramUsage = totalPsram > 0 ? (float)usedPsram / totalPsram * 100 : 0;
    
    Serial.printf("\nüìä PSRAM –ø–∞–º—è—Ç—å:\n");
    if (totalPsram > 0) {
        Serial.printf("   –°–≤–æ–±–æ–¥–Ω–æ: %lu MB (%lu KB)\n", freePsram / 1024 / 1024, freePsram / 1024);
        Serial.printf("   –ó–∞–Ω—è—Ç–æ:   %lu MB (%lu KB)\n", usedPsram / 1024 / 1024, usedPsram / 1024);
        Serial.printf("   –í—Å–µ–≥–æ:    %lu MB (%lu KB)\n", totalPsram / 1024 / 1024, totalPsram / 1024);
        Serial.printf("   –ó–∞–≥—Ä—É–∑–∫–∞: %.1f%%\n", psramUsage);
    } else {
        Serial.println("   ‚ùå PSRAM –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    }
    
    // Flash –ø–∞–º—è—Ç—å
    uint32_t flashSize = ESP.getFlashChipSize();
    Serial.printf("\nüìä FLASH –ø–∞–º—è—Ç—å:\n");
    Serial.printf("   –†–∞–∑–º–µ—Ä:   %lu MB (%lu KB)\n", flashSize / 1024 / 1024, flashSize / 1024);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    Serial.println("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
    if (heapUsage > 80) {
        Serial.println("   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HEAP! –í–æ–∑–º–æ–∂–Ω—ã —Å–±–æ–∏.");
    } else if (heapUsage > 60) {
        Serial.println("   ‚ö° –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HEAP.");
    } else {
        Serial.println("   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HEAP.");
    }
    
    if (totalPsram > 0 && psramUsage > 80) {
        Serial.println("   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PSRAM!");
    }
    
    Serial.println("=====================================");
}

void CommandHandler::showUptimeInfo() {
    unsigned long uptimeMs = millis();
    unsigned long seconds = uptimeMs / 1000;
    unsigned long minutes = seconds / 60;
    unsigned long hours = minutes / 60;
    unsigned long days = hours / 24;
    
    seconds %= 60;
    minutes %= 60;
    hours %= 24;
    
    Serial.println("\n‚è±Ô∏è  ===== –í–†–ï–ú–Ø –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´ =====");
    Serial.printf("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: ");
    
    if (days > 0) {
        Serial.printf("%lu –¥–Ω. ", days);
    }
    if (hours > 0) {
        Serial.printf("%lu —á. ", hours);
    }
    if (minutes > 0) {
        Serial.printf("%lu –º–∏–Ω. ", minutes);
    }
    Serial.printf("%lu —Å–µ–∫.\n", seconds);
    
    Serial.printf("üìä –í—Å–µ–≥–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥: %lu\n", uptimeMs);
    Serial.printf("üîÑ –ß–∞—Å—Ç–æ—Ç–∞ CPU: %lu MHz\n", ESP.getCpuFreqMHz());
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
    esp_reset_reason_t resetReason = esp_reset_reason();
    Serial.printf("üîÑ –ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ");
    switch (resetReason) {
        case ESP_RST_POWERON:
            Serial.println("–í–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è");
            break;
        case ESP_RST_EXT:
            Serial.println("–í–Ω–µ—à–Ω–∏–π —Å–±—Ä–æ—Å");
            break;
        case ESP_RST_SW:
            Serial.println("–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Å–±—Ä–æ—Å");
            break;
        case ESP_RST_PANIC:
            Serial.println("–ü–∞–Ω–∏–∫–∞/Exception");
            break;
        case ESP_RST_INT_WDT:
            Serial.println("Watchdog —Ç–∞–π–º–µ—Ä");
            break;
        case ESP_RST_TASK_WDT:
            Serial.println("Task Watchdog");
            break;
        case ESP_RST_WDT:
            Serial.println("–î—Ä—É–≥–æ–π Watchdog");
            break;
        case ESP_RST_DEEPSLEEP:
            Serial.println("–í—ã—Ö–æ–¥ –∏–∑ Deep Sleep");
            break;
        case ESP_RST_BROWNOUT:
            Serial.println("–ü—Ä–æ—Å–∞–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è");
            break;
        case ESP_RST_SDIO:
            Serial.println("SDIO —Å–±—Ä–æ—Å");
            break;
        default:
            Serial.printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ (%d)", resetReason);
            break;
    }
    
    Serial.println("=====================================");
}
